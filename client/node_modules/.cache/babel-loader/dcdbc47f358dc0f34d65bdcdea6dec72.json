{"ast":null,"code":"var _jsxFileName = \"/Users/sky/Documents/WEB/Projects/milim/milim/src/containers/FormAddWord/FormAddWord.js\";\nimport React, { Component, Fragment } from 'react';\nimport FormInfinitive from '../../components/WordForms/FormInfinitive/FormInfinitive';\nimport FormPast from '../../components/WordForms/FormPast/FormPast';\nimport FormFuture from '../../components/WordForms/FormFuture/FormFuture';\nimport classes from '../../components/WordForms/FormInfinitive/FormInfinitive.module.css';\nimport formConfigMobile from \"../../components/WordForms/formConfigurationMobile\";\nimport formConfigDesktop from \"../../components/WordForms/formConfigurationDesktop\";\nimport FormDesktop from \"../../components/WordForms/FormDesktop/FormDesktop\";\nimport CustomInput from \"../../components/WordForms/FormElements/CustomInput/CustomInput\";\n\nclass FormAddWord extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      step: 2,\n      infinitive: '',\n      imperative_man_singular: '',\n      imperative_man_plural: '',\n      imperative_woman_singular: '',\n      imperative_woman_plural: '',\n      present_man_singular: '',\n      present_man_plural: '',\n      present_woman_singular: '',\n      present_woman_plural: '',\n      past_man_1st: '',\n      past_man_plural_1st: '',\n      past_man_plural_1st_transcription: '',\n      past_woman_1st: '',\n      past_man_singular_2nd: '',\n      past_man_plural_2nd: '',\n      past_woman_singular_2nd: '',\n      past_woman_plural_2nd: '',\n      past_man_singular_3nd: '',\n      past_woman_singular_3nd: '',\n      past_plural_3nd: '',\n      future_man_1st: '',\n      future_woman_1st: '',\n      future_man_singular_2nd: '',\n      future_man_plural_2nd: '',\n      future_woman_singular_2nd: '',\n      future_woman_plural_2nd: '',\n      future_man_singular_3nd: '',\n      future_man_plural_3nd: '',\n      future_woman_singular_3nd: '',\n      future_woman_plural_3nd: ''\n    };\n\n    this.getInputs = () => {\n      const {\n        infinitive,\n        imperative_man_singular,\n        imperative_man_plural,\n        imperative_woman_singular,\n        imperative_woman_plural,\n        present_man_singular,\n        present_man_plural,\n        present_woman_singular,\n        present_woman_plural,\n        past_man_1st,\n        past_man_plural_1st,\n        past_man_plural_1st_transcription,\n        past_woman_1st,\n        past_man_singular_2nd,\n        past_man_plural_2nd,\n        past_woman_singular_2nd,\n        past_woman_plural_2nd,\n        past_man_singular_3nd,\n        past_woman_singular_3nd,\n        past_plural_3nd,\n        future_man_1st,\n        future_woman_1st,\n        future_man_singular_2nd,\n        future_man_plural_2nd,\n        future_woman_singular_2nd,\n        future_woman_plural_2nd,\n        future_man_singular_3nd,\n        future_man_plural_3nd,\n        future_woman_singular_3nd,\n        future_woman_plural_3nd,\n        infinitive_transcription,\n        imperative_man_singular_transcription,\n        imperative_man_plural_transcription,\n        imperative_woman_singular_transcription,\n        imperative_woman_plural_transcription,\n        present_man_singular_transcription,\n        present_man_plural_transcription,\n        present_woman_singular_transcription,\n        present_woman_plural_transcription,\n        past_man_1st_transcription,\n        past_woman_1st_transcription,\n        past_man_singular_2nd_transcription,\n        past_man_plural_2nd_transcription,\n        past_woman_singular_2nd_transcription,\n        past_woman_plural_2nd_transcription,\n        past_man_singular_3nd_transcription,\n        past_woman_singular_3nd_transcription,\n        past_plural_3nd_transcription,\n        future_man_1st_transcription,\n        future_woman_1st_transcription,\n        future_man_singular_2nd_transcription,\n        future_man_plural_2nd_transcription,\n        future_woman_singular_2nd_transcription,\n        future_woman_plural_2nd_transcription,\n        future_man_singular_3nd_transcription,\n        future_man_plural_3nd_transcription,\n        future_woman_singular_3nd_transcription,\n        future_woman_plural_3nd_transcription\n      } = this.state;\n      const values = {\n        infinitive,\n        imperative_man_singular,\n        imperative_man_plural,\n        imperative_woman_singular,\n        imperative_woman_plural,\n        present_man_singular,\n        present_man_plural,\n        present_woman_singular,\n        present_woman_plural,\n        past_man_1st,\n        past_man_plural_1st,\n        past_man_plural_1st_transcription,\n        past_woman_1st,\n        past_man_singular_2nd,\n        past_man_plural_2nd,\n        past_woman_singular_2nd,\n        past_woman_plural_2nd,\n        past_man_singular_3nd,\n        past_woman_singular_3nd,\n        past_plural_3nd,\n        future_man_1st,\n        future_woman_1st,\n        future_man_singular_2nd,\n        future_man_plural_2nd,\n        future_woman_singular_2nd,\n        future_woman_plural_2nd,\n        future_man_singular_3nd,\n        future_man_plural_3nd,\n        future_woman_singular_3nd,\n        future_woman_plural_3nd,\n        infinitive_transcription,\n        imperative_man_singular_transcription,\n        imperative_man_plural_transcription,\n        imperative_woman_singular_transcription,\n        imperative_woman_plural_transcription,\n        present_man_singular_transcription,\n        present_man_plural_transcription,\n        present_woman_singular_transcription,\n        present_woman_plural_transcription,\n        past_man_1st_transcription,\n        past_woman_1st_transcription,\n        past_man_singular_2nd_transcription,\n        past_man_plural_2nd_transcription,\n        past_woman_singular_2nd_transcription,\n        past_woman_plural_2nd_transcription,\n        past_man_singular_3nd_transcription,\n        past_woman_singular_3nd_transcription,\n        past_plural_3nd_transcription,\n        future_man_1st_transcription,\n        future_woman_1st_transcription,\n        future_man_singular_2nd_transcription,\n        future_man_plural_2nd_transcription,\n        future_woman_singular_2nd_transcription,\n        future_woman_plural_2nd_transcription,\n        future_man_singular_3nd_transcription,\n        future_man_plural_3nd_transcription,\n        future_woman_singular_3nd_transcription,\n        future_woman_plural_3nd_transcription\n      };\n      return values;\n    };\n\n    this.nextStep = () => {\n      const {\n        step\n      } = this.state;\n      this.setState({\n        step: step + 1\n      });\n    };\n\n    this.prevStep = () => {\n      const {\n        step\n      } = this.state;\n      this.setState({\n        step: step - 1\n      });\n    };\n\n    this.handleChange = input => e => {\n      this.setState({\n        [input]: e.target.value\n      });\n    };\n\n    this.renderForm = (timeTitles, type) => {\n      let values = this.getInputs();\n      let inputs = [];\n      let titles = [];\n      let icons = [];\n      let config = type === 'mobile' ? formConfigMobile : formConfigDesktop;\n      timeTitles.map(timeTitle => {\n        let timeInputs = config.filter(input => input.time === timeTitle && input.type === 'input');\n        let timeTitles = config.filter(title => title.time === timeTitle && title.type === 'title');\n        let timeIcons = config.filter(icon => icon.type === 'icon');\n        timeInputs.map(input => inputs.push(input));\n        timeTitles.map(title => titles.push(title));\n        timeIcons.map(icon => {\n          let arrayIcons = icon.time[timeTitle];\n\n          if (arrayIcons) {\n            arrayIcons.map(icon => icons.push(icon));\n          }\n        });\n      });\n      console.log('icons', icons);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.FormGrid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 16\n        }\n      }, inputs.map((input, index) => {\n        const {\n          rowStart,\n          rowEnd,\n          columnStart,\n          columnEnd,\n          time,\n          label,\n          placeholder,\n          name,\n          iconSrc,\n          iconAlt\n        } = input;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.FormGridItem,\n          style: {\n            gridRow: `${rowStart}/${rowEnd}`,\n            gridColumn: `${columnStart}/${columnEnd}`\n          },\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(CustomInput, {\n          name: name,\n          inputLabel: label,\n          id: name,\n          placeholder: placeholder,\n          onChange: this.handleChange(name),\n          value: values[name] // defaultValue={''}\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }\n        }));\n      }), titles.map((title, index) => {\n        const {\n          rowStart,\n          rowEnd,\n          columnStart,\n          columnEnd,\n          name\n        } = title;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: [classes.ConjugationTitle, classes.FormGridItem].join(' '),\n          style: {\n            gridRow: `${rowStart}/${rowEnd}`,\n            gridColumn: `${columnStart}/${columnEnd}`\n          },\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 21\n          }\n        }, name);\n      }), icons.map((icon, index) => {\n        const {\n          iconSrc,\n          alt,\n          rowStart,\n          rowEnd,\n          columnStart,\n          columnEnd\n        } = icon;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.FormGridItem,\n          style: {\n            gridRow: `${rowStart}/${rowEnd}`,\n            gridColumn: `${columnStart}/${columnEnd}`\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: classes.Icon,\n          src: iconSrc,\n          alt: alt,\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 25\n          }\n        }));\n      }));\n    };\n\n    this.getFormMobile = () => {\n      const {\n        step\n      } = this.state;\n\n      switch (step) {\n        case 1:\n          return /*#__PURE__*/React.createElement(FormInfinitive, {\n            nextStep: this.nextStep,\n            handleChange: this.handleChange,\n            renderForm: this.renderForm,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 21\n            }\n          });\n\n        case 2:\n          return /*#__PURE__*/React.createElement(FormPast, {\n            nextStep: this.nextStep,\n            prevStep: this.prevStep,\n            handleChange: this.handleChange,\n            renderForm: this.renderForm,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 21\n            }\n          });\n\n        case 3:\n          return /*#__PURE__*/React.createElement(FormFuture, {\n            nextStep: this.nextStep,\n            prevStep: this.prevStep,\n            handleChange: this.handleChange,\n            renderForm: this.renderForm,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 21\n            }\n          });\n\n        case 4:\n          return /*#__PURE__*/React.createElement(\"h1\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 24\n            }\n          }, \"Success\");\n      }\n    };\n\n    this.getFormDesktop = () => {\n      return /*#__PURE__*/React.createElement(FormDesktop, {\n        nextStep: this.nextStep,\n        handleChange: this.handleChange,\n        renderForm: this.renderForm,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }\n      });\n    };\n  }\n\n  render() {\n    let width = window.innerWidth;\n\n    if (width < 500) {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.FormTitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 21\n        }\n      }, \"Add Form\"), this.getFormMobile());\n    } else {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.FormContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 21\n        }\n      }, this.getFormDesktop()));\n    }\n  }\n\n}\n\nexport default FormAddWord;","map":{"version":3,"sources":["/Users/sky/Documents/WEB/Projects/milim/milim/src/containers/FormAddWord/FormAddWord.js"],"names":["React","Component","Fragment","FormInfinitive","FormPast","FormFuture","classes","formConfigMobile","formConfigDesktop","FormDesktop","CustomInput","FormAddWord","state","step","infinitive","imperative_man_singular","imperative_man_plural","imperative_woman_singular","imperative_woman_plural","present_man_singular","present_man_plural","present_woman_singular","present_woman_plural","past_man_1st","past_man_plural_1st","past_man_plural_1st_transcription","past_woman_1st","past_man_singular_2nd","past_man_plural_2nd","past_woman_singular_2nd","past_woman_plural_2nd","past_man_singular_3nd","past_woman_singular_3nd","past_plural_3nd","future_man_1st","future_woman_1st","future_man_singular_2nd","future_man_plural_2nd","future_woman_singular_2nd","future_woman_plural_2nd","future_man_singular_3nd","future_man_plural_3nd","future_woman_singular_3nd","future_woman_plural_3nd","getInputs","infinitive_transcription","imperative_man_singular_transcription","imperative_man_plural_transcription","imperative_woman_singular_transcription","imperative_woman_plural_transcription","present_man_singular_transcription","present_man_plural_transcription","present_woman_singular_transcription","present_woman_plural_transcription","past_man_1st_transcription","past_woman_1st_transcription","past_man_singular_2nd_transcription","past_man_plural_2nd_transcription","past_woman_singular_2nd_transcription","past_woman_plural_2nd_transcription","past_man_singular_3nd_transcription","past_woman_singular_3nd_transcription","past_plural_3nd_transcription","future_man_1st_transcription","future_woman_1st_transcription","future_man_singular_2nd_transcription","future_man_plural_2nd_transcription","future_woman_singular_2nd_transcription","future_woman_plural_2nd_transcription","future_man_singular_3nd_transcription","future_man_plural_3nd_transcription","future_woman_singular_3nd_transcription","future_woman_plural_3nd_transcription","values","nextStep","setState","prevStep","handleChange","input","e","target","value","renderForm","timeTitles","type","inputs","titles","icons","config","map","timeTitle","timeInputs","filter","time","title","timeIcons","icon","push","arrayIcons","console","log","FormGrid","index","rowStart","rowEnd","columnStart","columnEnd","label","placeholder","name","iconSrc","iconAlt","FormGridItem","gridRow","gridColumn","ConjugationTitle","join","alt","Icon","getFormMobile","getFormDesktop","render","width","window","innerWidth","FormTitle","FormContainer"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport FormInfinitive from '../../components/WordForms/FormInfinitive/FormInfinitive';\nimport FormPast from '../../components/WordForms/FormPast/FormPast';\nimport FormFuture from '../../components/WordForms/FormFuture/FormFuture';\nimport classes from '../../components/WordForms/FormInfinitive/FormInfinitive.module.css';\nimport formConfigMobile from \"../../components/WordForms/formConfigurationMobile\";\nimport formConfigDesktop from \"../../components/WordForms/formConfigurationDesktop\";\nimport FormDesktop from \"../../components/WordForms/FormDesktop/FormDesktop\";\nimport CustomInput from \"../../components/WordForms/FormElements/CustomInput/CustomInput\";\n\nclass FormAddWord extends Component {\n    state = {\n        step: 2,\n        infinitive: '',\n        imperative_man_singular: '',\n        imperative_man_plural: '',\n        imperative_woman_singular: '',\n        imperative_woman_plural: '',\n        present_man_singular: '',\n        present_man_plural: '',\n        present_woman_singular: '',\n        present_woman_plural: '',\n        past_man_1st: '',\n        past_man_plural_1st: '',\n        past_man_plural_1st_transcription: '',\n        past_woman_1st: '',\n        past_man_singular_2nd: '',\n        past_man_plural_2nd: '',\n        past_woman_singular_2nd: '',\n        past_woman_plural_2nd: '',\n        past_man_singular_3nd: '',\n        past_woman_singular_3nd: '',\n        past_plural_3nd: '',\n        future_man_1st: '',\n        future_woman_1st: '',\n        future_man_singular_2nd: '',\n        future_man_plural_2nd: '',\n        future_woman_singular_2nd: '',\n        future_woman_plural_2nd: '',\n        future_man_singular_3nd: '',\n        future_man_plural_3nd: '',\n        future_woman_singular_3nd: '',\n        future_woman_plural_3nd: ''\n    };\n    getInputs = () => {\n        const {\n            infinitive,\n            imperative_man_singular,\n            imperative_man_plural,\n            imperative_woman_singular,\n            imperative_woman_plural,\n            present_man_singular,\n            present_man_plural,\n            present_woman_singular,\n            present_woman_plural,\n            past_man_1st,\n            past_man_plural_1st,\n            past_man_plural_1st_transcription,\n            past_woman_1st,\n            past_man_singular_2nd,\n            past_man_plural_2nd,\n            past_woman_singular_2nd,\n            past_woman_plural_2nd,\n            past_man_singular_3nd,\n            past_woman_singular_3nd,\n            past_plural_3nd,\n            future_man_1st,\n            future_woman_1st,\n            future_man_singular_2nd,\n            future_man_plural_2nd,\n            future_woman_singular_2nd,\n            future_woman_plural_2nd,\n            future_man_singular_3nd,\n            future_man_plural_3nd,\n            future_woman_singular_3nd,\n            future_woman_plural_3nd,\n            infinitive_transcription,\n            imperative_man_singular_transcription,\n            imperative_man_plural_transcription,\n            imperative_woman_singular_transcription,\n            imperative_woman_plural_transcription,\n            present_man_singular_transcription,\n            present_man_plural_transcription,\n            present_woman_singular_transcription,\n            present_woman_plural_transcription,\n            past_man_1st_transcription,\n            past_woman_1st_transcription,\n            past_man_singular_2nd_transcription,\n            past_man_plural_2nd_transcription,\n            past_woman_singular_2nd_transcription,\n            past_woman_plural_2nd_transcription,\n            past_man_singular_3nd_transcription,\n            past_woman_singular_3nd_transcription,\n            past_plural_3nd_transcription,\n            future_man_1st_transcription,\n            future_woman_1st_transcription,\n            future_man_singular_2nd_transcription,\n            future_man_plural_2nd_transcription,\n            future_woman_singular_2nd_transcription,\n            future_woman_plural_2nd_transcription,\n            future_man_singular_3nd_transcription,\n            future_man_plural_3nd_transcription,\n            future_woman_singular_3nd_transcription,\n            future_woman_plural_3nd_transcription\n        } = this.state;\n        const values = {\n            infinitive,\n            imperative_man_singular,\n            imperative_man_plural,\n            imperative_woman_singular,\n            imperative_woman_plural,\n            present_man_singular,\n            present_man_plural,\n            present_woman_singular,\n            present_woman_plural,\n            past_man_1st,\n            past_man_plural_1st,\n            past_man_plural_1st_transcription,\n            past_woman_1st,\n            past_man_singular_2nd,\n            past_man_plural_2nd,\n            past_woman_singular_2nd,\n            past_woman_plural_2nd,\n            past_man_singular_3nd,\n            past_woman_singular_3nd,\n            past_plural_3nd,\n            future_man_1st,\n            future_woman_1st,\n            future_man_singular_2nd,\n            future_man_plural_2nd,\n            future_woman_singular_2nd,\n            future_woman_plural_2nd,\n            future_man_singular_3nd,\n            future_man_plural_3nd,\n            future_woman_singular_3nd,\n            future_woman_plural_3nd,\n            infinitive_transcription,\n            imperative_man_singular_transcription,\n            imperative_man_plural_transcription,\n            imperative_woman_singular_transcription,\n            imperative_woman_plural_transcription,\n            present_man_singular_transcription,\n            present_man_plural_transcription,\n            present_woman_singular_transcription,\n            present_woman_plural_transcription,\n            past_man_1st_transcription,\n            past_woman_1st_transcription,\n            past_man_singular_2nd_transcription,\n            past_man_plural_2nd_transcription,\n            past_woman_singular_2nd_transcription,\n            past_woman_plural_2nd_transcription,\n            past_man_singular_3nd_transcription,\n            past_woman_singular_3nd_transcription,\n            past_plural_3nd_transcription,\n            future_man_1st_transcription,\n            future_woman_1st_transcription,\n            future_man_singular_2nd_transcription,\n            future_man_plural_2nd_transcription,\n            future_woman_singular_2nd_transcription,\n            future_woman_plural_2nd_transcription,\n            future_man_singular_3nd_transcription,\n            future_man_plural_3nd_transcription,\n            future_woman_singular_3nd_transcription,\n            future_woman_plural_3nd_transcription\n        };\n        return values;\n    }\n    nextStep = () => {\n        const {step} = this.state;\n        this.setState({step: step + 1})\n    };\n    prevStep = () => {\n        const {step} = this.state;\n        this.setState({step: step - 1})\n    };\n    handleChange = input => e => {\n        this.setState({[input]: e.target.value});\n    };\n    renderForm = (timeTitles, type) => {\n        let values = this.getInputs();\n        let inputs = [];\n        let titles = [];\n        let icons = [];\n        let config = type === 'mobile' ? formConfigMobile :  formConfigDesktop;\n        timeTitles.map(timeTitle => {\n            let timeInputs = config.filter(input => input.time === timeTitle && input.type === 'input');\n            let timeTitles = config.filter(title => title.time === timeTitle && title.type === 'title');\n            let timeIcons = config.filter(icon => icon.type === 'icon');\n            timeInputs.map(input => inputs.push(input));\n            timeTitles.map(title => titles.push(title));\n            timeIcons.map(icon => {\n                let arrayIcons = icon.time[timeTitle];\n                if (arrayIcons) {\n                    arrayIcons.map(icon => icons.push(icon));\n                }\n            })\n        })\n        console.log('icons', icons);\n        return <div className={classes.FormGrid}>\n            {inputs.map((input, index) => {\n                const {rowStart, rowEnd, columnStart, columnEnd, time, label, placeholder, name, iconSrc, iconAlt} = input;\n                return (\n                    <div className={classes.FormGridItem} style={{\n                        gridRow: `${rowStart}/${rowEnd}`,\n                        gridColumn: `${columnStart}/${columnEnd}`\n                    }}\n                         key={index}\n                    >\n                        <CustomInput\n                            name={name}\n                            inputLabel={label}\n                            id={name}\n                            placeholder={placeholder}\n                            onChange={this.handleChange(name)}\n                            value={values[name]}\n                            // defaultValue={''}\n                        />\n                    </div>\n                )\n            })}\n            {titles.map((title, index) => {\n                const {rowStart, rowEnd, columnStart, columnEnd, name,} = title;\n                return (\n                    <div className={[classes.ConjugationTitle, classes.FormGridItem].join(' ')} style={{\n                        gridRow: `${rowStart}/${rowEnd}`,\n                        gridColumn: `${columnStart}/${columnEnd}`\n                    }}\n                         key={index}\n                    >{name}</div>\n                )\n            })}\n            {icons.map((icon, index) => {\n                const {iconSrc, alt, rowStart, rowEnd, columnStart, columnEnd} = icon;\n                return (\n                    <div className={classes.FormGridItem} style={{\n                        gridRow: `${rowStart}/${rowEnd}`,\n                        gridColumn: `${columnStart}/${columnEnd}`\n                    }}>\n                        <img className={classes.Icon} src={iconSrc}\n                             alt={alt}\n                             key={index}/>\n                    </div>\n                )\n            })}\n        </div>\n    }\n    getFormMobile= () => {\n        const {step} = this.state;\n        switch (step) {\n            case 1:\n                return (\n                    <FormInfinitive\n                        nextStep={this.nextStep}\n                        handleChange={this.handleChange}\n                        renderForm={this.renderForm}\n                    />\n                );\n            case 2:\n                return (\n                    <FormPast\n                        nextStep={this.nextStep}\n                        prevStep={this.prevStep}\n                        handleChange={this.handleChange}\n                        renderForm={this.renderForm}\n                    />\n                );\n            case 3:\n                return (\n                    <FormFuture\n                        nextStep={this.nextStep}\n                        prevStep={this.prevStep}\n                        handleChange={this.handleChange}\n                        renderForm={this.renderForm}\n                    />\n                );\n            case 4:\n                return <h1>Success</h1>\n        }\n    };\n    getFormDesktop= () => {\n\n                return (\n                    <FormDesktop\n                        nextStep={this.nextStep}\n                        handleChange={this.handleChange}\n                        renderForm={this.renderForm}\n                    />\n                );\n\n    };\n    render() {\n        let width = window.innerWidth;\n        if(width < 500){\n            return (\n                <Fragment>\n                    <div className={classes.FormTitle}>Add Form</div>\n                    {this.getFormMobile()}\n                </Fragment>\n            )\n        } else {\n            return (\n                <Fragment>\n                    <div className={classes.FormContainer}>\n                        {this.getFormDesktop()}\n                    </div>\n                </Fragment>\n            )\n        }\n\n    }\n}\nexport default FormAddWord;"]},"metadata":{},"sourceType":"module"}